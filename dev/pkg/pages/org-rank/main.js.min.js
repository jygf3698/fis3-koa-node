define('pages/org-rank/main', function(require, exports, module) {

  /**
   * main
   * @require 'pages/org-rank/index.scss' // 无需在页面中控制 css
   */
  
  var localAjax = require('localAjax');
  var util = require('util');
  var wxshare = require('share');
  
  var scrollLoad = require('scrollload');
  var rankHeader = require('rank-header');
  var rankTop = require('rank-top');
  var rankNormal = require('rank-normal');
  
  var tpl = require('org-rank/index.tpl');
  var Component = require('comBase');
  var component = new Component($('body'), tpl);
  
  // window.r 用于判断是否使用浏览器端拉数据渲染，有r且含有值则使用浏览器端渲染
  window.r = util.url.getUrlParam('r');
  
  component.extend({
  
      init: function() {
          this._renderData();
      },
  
      _renderData: function() {
          if (window.r) {
              this._ajaxData();
          } else {
              this._initComponent();
              this._bindEvent();
          }
      },
  
      _ajaxData: function() {
          var self = this;
          $.localAjax({
              url: '../mock/rank.json',
              method: 'get',
              dataType: 'json',
              data: {},
              done: function(data) {
                  self._initComponent(data.result);
                  self._bindEvent(data.result);
              },
              fail: function(msg) {
                  // dialog.init();
              }
          });
      },
  
      _initComponent: function(data) {
          rankHeader.init(data);
          rankTop.init(data);
          rankNormal.init(data);
      },
  
      _bindEvent: function(data) {
  
          var self = this;
          self.$el.on('click', '[data-href]', function() {
              window.location.href = $(this).data('href');
          });
  
          // 按需异步模块测试
          /*require.async(['testMod'], function(Mod) {
              Mod.init();
          });
          require.async(['testMod1'], function(Mod) {
              Mod.init();
          });*/
  
          wxshare.start(wxJsConfig, {
              title: '',
              link: '',
              desc: '',
              imgUrl: ''
          });
      }
  });
  
  module.exports = component;

});
;define('localAjax', function(require, exports, module) {

  /**
   * @author: ouvenzhang
   * @localAjax 函数，带有localstorage功能
   * @example
   * 注意回调中需要使用done，fail来处理请求成功与失败情况，原有ajax的success和error函数无效
   */
  (function(root, factory) {
       if (typeof define === 'function' && define.amd) {
          // AMD
          define(['zepto', './localStorage', './md5'], factory);
      } else if (typeof exports === 'object') {
          // Node, CommonJS之类的
          module.exports = factory(require('zepto'), require('localStorage'), require('md5'));
      } else {
          // 浏览器全局变量(root 即 window)
          root['localAjax'] = factory(root['Zepto'], root['localData'], root['md5']);
      }
  
  })(this, function($) {
  
      /**
       * 结合ajax获取请求数据
       * @param  {[type]} opts [description]
       * @return {[type]}      [description]
       */
      var exports = function(opts) {
  
          var defaults = $.extend(opts, {
              success: function(data) {
                  opts.done && opts.done(data);
  
                  /**
                   * 延时存储数据，按照cgi的md5作为key存入localstorage
                   */
                  setTimeout(function() {
                      try {
                          $.localData.set($.md5(opts.url), JSON.stringify(data));
                      } catch (e) {
                          console.info(e.msg)
                      }
                  }, 3000);
              },
              error: function(msg) {
                  try {
  
                      /**
                       * 失败时尝试获取本地数据进行渲染，按照cgi的md5作为key存入localstorage
                       */
                      var data = JSON.parse($.localData.get($.md5(opts.url)));
                      opts.done && opts.done(data);
                  } catch (e) {
                      opts.fail && opts.fail(msg);
                      console.info(e.msg)
                  }
              }
          });
          $.ajax(defaults);
      };
  
      $.localAjax = exports;
      return exports;
  });
  

});
;define('util', function(require, exports, module) {

  /**
   * nodejs端web开发常见工具类
   */
  
  'use strict';
  
  var emptyObject = {};
  var noop = function() {};
  
  var util = {
  	time: emptyObject,
  	session: emptyObject,
  	cookie: emptyObject,
  	html: emptyObject,
  	string: emptyObject,
  	array: emptyObject,
  	url: emptyObject
  }
  
  /**
   * util.time.format('yyyy-mm-dd hh-ii-ss', +new Date());
   * @type {[type]}
   * 传入时间戳或时间字符串，获取时间格式含有各种方式，根据yy、mm、dd、hh、ii、ss来替换匹配
   */
  util.time.format = format;
  
  /**
   * util.time.getDay(+new Date());
   * @type {[type]}
   * 获取星期值
   */
  util.time.getDay = getDay;
  
  util.html.htmlEncode = htmlEncode;
  util.html.htmlDecode = htmlDecode;
  util.html.toRaw = toRaw;
  
  util.string.json2str = json2str;
  
  util.array.inArray = inArray;
  util.array.removeFromArray = removeFromArray;
  
  util.url.getUrlParam = getUrlParam;
  
  function getUrlParam(name) {
  	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象
  	var r = window.location.search.substr(1).match(reg); //匹配目标参数
  	if (r != null) {
  		return unescape(r[2]);
  	}
  	return null;
  };
  
  function format(format, timestamp) {
  
  	timestamp = new Date(timestamp);
  
  	var year = timestamp.getFullYear(); //获取完整的年份(4位,1970)
  	var month = timestamp.getMonth() + 1 < 10 ? '0' + (timestamp.getMonth() + 1) : timestamp.getMonth() + 1; //获取月份(0-11,0代表1月,用的时候记得加上1)
  	var date = timestamp.getDate() < 10 ? '0' + timestamp.getDate() : timestamp.getDate(); //获取日(1-31)
  
  	var hour = timestamp.getHours() < 10 ? '0' + timestamp.getHours() : timestamp.getHours(); //获取小时数(0-23)
  	var minite = timestamp.getMinutes() < 10 ? '0' + timestamp.getMinutes() : timestamp.getMinutes(); //获取分钟数(0-59)
  	var second = timestamp.getSeconds() < 10 ? '0' + timestamp.getSeconds() : timestamp.getSeconds(); //获取秒数(0-59)
  
  	return format.replace(/y+/ig, year).replace(/m+/ig, month).replace(/d+/ig, date).replace(/h+/ig, hour).replace(/i+/ig, minite).replace(/s+/ig, second);
  }
  
  function getDay(timestamp) {
  	const Day = ['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'];
  	return Day[timestamp.getDay()];
  
  }
  
  function htmlEncode(str) {
  	var s = "";
  	if (str.length == 0) return "";
  	s = str.replace(/&/g, "&amp;");
  	s = s.replace(/</g, "&lt;");
  	s = s.replace(/>/g, "&gt;");
  	s = s.replace(/ /g, "&nbsp;");
  	s = s.replace(/\'/g, "&#39;");
  	s = s.replace(/\"/g, "&quot;");
  	s = s.replace(/\n/g, "<br>");
  	return s;
  }
  
  function htmlDecode(str) {
  	var s = "";
  	if (str.length == 0) return "";
  	s = str.replace(/&amp;/g, "&");
  	s = s.replace(/&lt;/g, "<");
  	s = s.replace(/&gt;/g, ">");
  	s = s.replace(/&nbsp;/g, " ");
  	s = s.replace(/&#39;/g, "\'");
  	s = s.replace(/&quot;/g, "\"");
  	s = s.replace(/<br>/g, "\n");
  	return s;
  }
  
  function toRaw(str) {
  	return str.replace(/\<.+?\s*\/\>/gi, '');
  }
  
  function json2str(json) {
  	var arr = [];
  	for (var key in json) {
  		arr.push(key + '=' + json[key]);
  	}
  	return arr.join('&');
  }
  
  function inArray(item, array) {
  	for (var el of array) {
  		if (el === item) {
  			return true;
  		}
  	}
  	return false;
  }
  
  function removeFromArray(item, array) {
  	for (var i = 0, len = array.length; i < len; i++) {
  		if (array[i] === item) {
  			array.splice(i, 1);
  			break;
  		}
  	}
  	return array;
  }
  
  module.exports = util;

});
;define('share', function(require, exports, module) {

  'use strict';
  
  var noop = function() {};
  
  module.exports = {
  
      success: noop,
      cancel: noop,
  
      /**
       * 设置数据
       * @param {[type]} data [description]
       */
      _setData: function(data) {
          var self = this;
  
          self.data = {
              title: data.title || $('meta[itemprop=name]').attr('content') || document.title,
              desc: data.desc || $('meta[itemprop=description]').attr('content') || document.title,
              link: data.link || location.href,
              imgUrl: data.imgUrl || $('meta[itemprop=image]').attr('content'),
  
              type: data.type || '',
              dataUrl: data.dataUrl || '',
              success: self.success,
              cancel: self.cancel
          };
  
          var shareCfg = {
              title: self.data.title,
              thumb: self.data.imgUrl,
              targetUrl: self.data.link,
              content: self.data.desc,
          }
  
          //深度克隆
          self.QQData = JSON.stringify(self.data);
          self.QQData = JSON.parse(self.QQData);
          self.TimeLineData = JSON.stringify(self.data);
          self.TimeLineData = JSON.parse(self.TimeLineData);
          self.WeiBoData = JSON.stringify(self.data);
          self.WeiBoData = JSON.parse(self.WeiBoData);
  
          //反序列化
          self.QQData.success = self.success;
          self.TimeLineData.success = self.success;
          self.WeiBoData.success = self.success;
          self.QQData.cancel = self.cancel;
          self.TimeLineData.cancel = self.cancel;
          self.WeiBoData.cancel = self.cancel;
      },
  
      // 初始化调用
      start: function(opt, data) {
          var self = this;
          wx.config({
              debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
              appId: opt.appid, // 必填，公众号的唯一标识
              timestamp: opt.timestamp, // 必填，生成签名的时间戳
              nonceStr: opt.nonceStr, // 必填，生成签名的随机串
              signature: opt.signature, // 必填，签名，见附录1
              jsApiList: [
                  'checkJsApi',
                  'onMenuShareAppMessage',
                  'onMenuShareTimeline',
                  'onMenuShareQQ',
                  'onMenuShareQZone',
                  'onMenuShareWeibo'
              ]
          });
  
          self._setData(data);
  
          wx.ready(function() {
              wx.onMenuShareAppMessage(self.data);
              wx.onMenuShareTimeline(self.data);
              wx.onMenuShareQQ(self.data);
              wx.onMenuShareQZone(self.data);
          });
  
      }
  };

});
;define('scrollload', function(require, exports, module) {

  // 自动滚动到底部加载触发事件
  /**
   * $.fn.scrollLoad(400,function(count) {
       console.log(count);
   })
   * 传入触发间隔时间和触发回调，回调带回来的是累计调用的次数
   */
  
  (function(root, factory) {
      if (typeof define === 'function' && define.amd) {
          // AMD
          define(['zepto'], factory);
      } else if (typeof exports === 'object') {
          // Node, CommonJS之类的
          module.exports = factory(require('zepto'));
      } else {
          // 浏览器全局变量(root 即 window)
          root['Zepto'] = factory(root['Zepto']);
      }
  
  })(this, function($) {
  
      $.fn.scrollLoad = function(time, fn) {
          var winHeight = $(window).height(); //窗口高度
          var count = 0, // 调用次数
              lock = false; // 内部防止频繁触发滚动事件
  
          var scrollHandler = function() {
              if (lock) {
                  return;
              }
              var pageHeight = $(document).height(); //文档高度
              var scrollTop = $(window).scrollTop(); //滚动的高度
              var percent = (pageHeight - winHeight - scrollTop) / winHeight;
              if (percent < 0.02) {
                  lock = true;
                  fn(++count);
                  setTimeout(function() {
                      lock = false;
                  }, time);
              }
          };
  
          //定义鼠标滚动事件  
          $(window).scroll(scrollHandler);
      }
      return $.fn.scrollLoad;
  });

});
;define('rank-header', function(require, exports, module) {

  'use strict';
  /**
   * 可以使用extends方法覆盖下列方法
   * init(data) // 初始化方法
   * _renderData(data) // 渲染数据方法
   * _bindEvent() //事件绑定
   */
  var Component = require('comBase');
  
  var tpl = require('rank-header/index.tpl');
  
  var component = new Component($('#rankHeader'), tpl);
  
  module.exports = component;

});
;define('rank-top', function(require, exports, module) {

  'use strict';
  /**
   * 可以使用extends方法覆盖下列方法
   * init(data) // 初始化方法
   * _renderData(data) // 渲染数据方法
   * _bindEvent() //事件绑定
   */
  var Component = require('comBase');
  var tpl = require('rank-top/index.tpl');
  var component = new Component($('#rankTop'), tpl);
  
  module.exports = component;

});
;define('rank-normal', function(require, exports, module) {

  'use strict';
  /**
   * 可以使用extends方法覆盖下列方法
   * init(data) // 初始化方法
   * _renderData(data) // 渲染数据方法
   * _bindEvent() //事件绑定
   */
  
  var Component = require('comBase');
  var scrollLoad = require('scrollload');
  
  var tpl = require('rank-normal/index.tpl');
  
  var component = new Component($('#rankNormal'), tpl);
  
  component.extend({
  
  	_bindEvent: function() {
  		var self = this;
  		var curCount = 0;
  
  		scrollLoad(300, function(count) {
  			if (count > curCount) {
  				curCount = count;
  				self._loadMoreComment(count);
  			}
  		});
  	},
  
  
  	_loadMoreComment: function(count) {
  		$.localAjax({
  			url: '../mock/more-rank.json',
  			method: 'get',
  			dataType: 'json',
  			data: {
  				count: count
  			},
  			done: function(data) {
  				_renderComment(data.result);
  				// self._bindEvent(data.result);
  			},
  			fail: function(msg) {
  				dialog.init();
  			}
  		});
  
  		function _renderComment(data) {
  
  			var $el = $('#rankNormal');
  
  			if (data.rankList.length) {
  				$el.append(tpl({
  					data: data
  				}));
  			}
  		}
  	}
  });
  
  module.exports = component;

});
;define('org-rank/index.tpl', function(require, exports, module) {

  return  function (it, opt) {
      it = it || {};
      with(it) {
          var _$out_= [];
          
        return _$out_.join('');
      }
  }

});
;define('comBase', function(require, exports, module) {

  /**
   * 生成Component基类，自动产生模块需要的方法
   * @param {[type]} $el [description]
   * 
   * 默认生成组件模板如下，可以使用extend扩展
   * @type {[type]}
   * 
      var tips = {
          $el: $('#orgContent'),
          init: function(data) {},
          _renderData: function(data) {},
          _bindEvent: function() {}
      }
   */
  function Component($el, tpl) {
  
  	this.$el = $el;
  
  	/**
  	 * 初始化
  	 * @param  {[type]} data [description]
  	 * @return {[type]}      [description]
  	 */
  	this.init = function(data) {
  		if (window.r) {
  			this._renderData(data);
  		}
  		this._bindEvent();
  	};
  
  	/**
  	 * 组件内容更新
  	 * @param  {[type]} data [description]
  	 * @return {[type]}      [description]
  	 */
  	this.refresh = function(data) {
  		this.$el.html(tpl({
  			data: data
  		}));
  	}
  
  	/**
  	 * 渲染数据
  	 * @param  {[type]} data [description]
  	 * @return {[type]}      [description]
  	 */
  	this._renderData = function(data) {
  		this.$el.html(tpl({
  			data: data
  		}));
  	};
  
  	/**
  	 * 绑定事件
  	 * @return {[type]} [description]
  	 */
  	this._bindEvent = function() {};
  }
  
  /**
   * 组件继承方法
   * @param  {[type]} obj [description]
   * @return {[type]}     [description]
   */
  Component.prototype.extend = function(obj) {
  	for (var item in obj) {
  		this[item] = obj[item];
  	}
  }
  
  module.exports = Component;

});
;define('localStorage', function(require, exports, module) {

  /**
   * localstorage: 使用全局localData调用
   */
  
  (function(root, factory) {
      if (typeof define === 'function' && define.amd) {
          // AMD
          define('zepto', factory);
      } else if (typeof exports === 'object') {
          // Node, CommonJS之类的
          module.exports = factory(require('zepto'));
      } else {
          // 浏览器全局变量(root 即 window)
          root['localData'] = factory(root['Zepto']);
      }
  
  })(this, function($) {
  
      var rkey = /^[0-9A-Za-z_@-]*$/;
      var store;
  
      function init() {
          if (typeof store == 'undefined') {
              store = window['localStorage'];
          }
          return true;
      }
  
      function isValidKey(key) {
          if (typeof key != 'string') {
              return false;
          }
          return rkey.test(key);
      }
  
      var exports = {
          set:function (key, value) {
              var success = false;
              if (isValidKey(key) && init()) {
                  try {
                      value += '';
                      store.setItem(key, value);
                      success = true;
                  } catch (e) {}
              }
              return success;
          },
          get:function (key) {
              if (isValidKey(key) && init()) {
                  try {
                      return store.getItem(key);
                  } catch (e) {}
              }
              return null;
          },
          remove:function (key) {
              if (isValidKey(key) && init()) {
                  try {
                      store.removeItem(key);
                      return true;
                  } catch (e) {}
              }
              return false;
          },
          clear : function () {
              if (init()) {
                  try {
                      for (var o in store) {
                          store.removeItem(o);
                      }
                      return true;
                  } catch (e) {}
              }
              return false;
          }
      };
      $.localData = exports;
      return exports;
  });
  

});
;define('md5', function(require, exports, module) {

  /*
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */
  
  /*
   * Configurable variables. You may need to tweak these to be compatible with
   * the server-side, but the defaults work in most cases.
   */
  (function(root, factory) {
      if (typeof define === 'function' && define.amd) {
          // AMD
          define(['zepto'], factory);
      } else if (typeof exports === 'object') {
          // Node, CommonJS之类的
          module.exports = factory(require('zepto'));
      } else {
          // 浏览器全局变量(root 即 window)
          root['md5'] = factory(root['Zepto']);
      }
  
  })(this, function($) {
      var exports = $;
      var hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase        */
      var b64pad = ""; /* base-64 pad character. "=" for strict RFC compliance   */
      var chrsz = 8; /* bits per input character. 8 - ASCII; 16 - Unicode      */
  
      /*
       * These are the functions you'll usually want to call
       * They take string arguments and return either hex or base-64 encoded strings
       */
      function hex_md5(s) {
          return binl2hex(core_md5(str2binl(s), s.length * chrsz));
      }
  
      function b64_md5(s) {
          return binl2b64(core_md5(str2binl(s), s.length * chrsz));
      }
  
      function str_md5(s) {
          return binl2str(core_md5(str2binl(s), s.length * chrsz));
      }
  
      function hex_hmac_md5(key, data) {
          return binl2hex(core_hmac_md5(key, data));
      }
  
      function b64_hmac_md5(key, data) {
          return binl2b64(core_hmac_md5(key, data));
      }
  
      function str_hmac_md5(key, data) {
          return binl2str(core_hmac_md5(key, data));
      }
  
      /*
       * Perform a simple self-test to see if the VM is working
       */
      function md5_vm_test() {
          return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72";
      }
  
      /*
       * Calculate the MD5 of an array of little-endian words, and a bit length
       */
      function core_md5(x, len) {
          /* append padding */
          x[len >> 5] |= 0x80 << ((len) % 32);
          x[(((len + 64) >>> 9) << 4) + 14] = len;
  
          var a = 1732584193;
          var b = -271733879;
          var c = -1732584194;
          var d = 271733878;
  
          for (var i = 0; i < x.length; i += 16) {
              var olda = a;
              var oldb = b;
              var oldc = c;
              var oldd = d;
  
              a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
              d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
              c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
              b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
              a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
              d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
              c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
              b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
              a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
              d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
              c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
              b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
              a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
              d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
              c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
              b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
  
              a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
              d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
              c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
              b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
              a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
              d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
              c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
              b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
              a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
              d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
              c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
              b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
              a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
              d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
              c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
              b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
  
              a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
              d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
              c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
              b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
              a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
              d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
              c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
              b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
              a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
              d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
              c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
              b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
              a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
              d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
              c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
              b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
  
              a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
              d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
              c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
              b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
              a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
              d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
              c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
              b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
              a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
              d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
              c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
              b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
              a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
              d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
              c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
              b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
  
              a = safe_add(a, olda);
              b = safe_add(b, oldb);
              c = safe_add(c, oldc);
              d = safe_add(d, oldd);
          }
          return Array(a, b, c, d);
  
      }
  
      /*
       * These functions implement the four basic operations the algorithm uses.
       */
      function md5_cmn(q, a, b, x, s, t) {
          return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
      }
  
      function md5_ff(a, b, c, d, x, s, t) {
          return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
      }
  
      function md5_gg(a, b, c, d, x, s, t) {
          return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
      }
  
      function md5_hh(a, b, c, d, x, s, t) {
          return md5_cmn(b ^ c ^ d, a, b, x, s, t);
      }
  
      function md5_ii(a, b, c, d, x, s, t) {
          return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
      }
  
      /*
       * Calculate the HMAC-MD5, of a key and some data
       */
      function core_hmac_md5(key, data) {
          var bkey = str2binl(key);
          if (bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);
  
          var ipad = Array(16),
              opad = Array(16);
          for (var i = 0; i < 16; i++) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
          }
  
          var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
          return core_md5(opad.concat(hash), 512 + 128);
      }
  
      /*
       * Add integers, wrapping at 2^32. This uses 16-bit operations internally
       * to work around bugs in some JS interpreters.
       */
      function safe_add(x, y) {
          var lsw = (x & 0xFFFF) + (y & 0xFFFF);
          var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
          return (msw << 16) | (lsw & 0xFFFF);
      }
  
      /*
       * Bitwise rotate a 32-bit number to the left.
       */
      function bit_rol(num, cnt) {
          return (num << cnt) | (num >>> (32 - cnt));
      }
  
      /*
       * Convert a string to an array of little-endian words
       * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
       */
      function str2binl(str) {
          var bin = Array();
          var mask = (1 << chrsz) - 1;
          for (var i = 0; i < str.length * chrsz; i += chrsz)
              bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (i % 32);
          return bin;
      }
  
      /*
       * Convert an array of little-endian words to a string
       */
      function binl2str(bin) {
          var str = "";
          var mask = (1 << chrsz) - 1;
          for (var i = 0; i < bin.length * 32; i += chrsz)
              str += String.fromCharCode((bin[i >> 5] >>> (i % 32)) & mask);
          return str;
      }
  
      /*
       * Convert an array of little-endian words to a hex string.
       */
      function binl2hex(binarray) {
          var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
          var str = "";
          for (var i = 0; i < binarray.length * 4; i++) {
              str += hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8 + 4)) & 0xF) +
                  hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8)) & 0xF);
          }
          return str;
      }
  
      /*
       * Convert an array of little-endian words to a base-64 string
       */
      function binl2b64(binarray) {
          var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          var str = "";
          for (var i = 0; i < binarray.length * 4; i += 3) {
              var triplet = (((binarray[i >> 2] >> 8 * (i % 4)) & 0xFF) << 16) | (((binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4)) & 0xFF) << 8) | ((binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4)) & 0xFF);
              for (var j = 0; j < 4; j++) {
                  if (i * 8 + j * 6 > binarray.length * 32) str += b64pad;
                  else str += tab.charAt((triplet >> 6 * (3 - j)) & 0x3F);
              }
          }
          return str;
      }
  
      $.md5 = hex_md5;
  
      return hex_md5;
  });
  

});
;define('rank-header/index.tpl', function(require, exports, module) {

  return  function (it, opt) {
      it = it || {};
      with(it) {
          var _$out_= [];
          _$out_.push('<div class="ui-placehold-img"> <span style="background-image:url(',  data.banner , ')"></span></div><div class="ui-banner"> <p class="ui-txt-white ui-txt-left">',  data.date , '</p> <p class="ui-txt-white ui-txt-right">',  data.title , '</p></div>');
        return _$out_.join('');
      }
  }

});
;define('rank-top/index.tpl', function(require, exports, module) {

  return  function (it, opt) {
      it = it || {};
      with(it) {
          var _$out_= [];
           var loop = {index: 1, first: true};var item;
   for ( var i = 0 ,len = data.rankList.length; i < len; i++){ loop.index = i+1; item = data.rankList[i]; if(loop.index === 1){ loop.first === true;}else{ loop.first = false; }
          _$out_.push( ' '); if( loop.index < 4){
          _$out_.push( ' <li class="rank-top-list ui-border-b '); if( loop.index === 1){
          _$out_.push( 'top-first'); }
          _$out_.push( '"> <h4>No ',  loop.index , '</h4> <div class="ui-avatar-one"><span style="background-image:url(',  item.logo , ')"></span></div> <div class="desc"> <h2>',  item.name , '</h2> <h5><span>动态:',  item.msg , '</span> / <span>关注:',  item.follow , '</span></h5> <div class="ui-sign"><span class="number">',  item.sign , '</span>人签到</div> </div> </li> '); }
          _$out_.push( ''); }
          _$out_.push( '');
        return _$out_.join('');
      }
  }

});
;define('rank-normal/index.tpl', function(require, exports, module) {

  return  function (it, opt) {
      it = it || {};
      with(it) {
          var _$out_= [];
           var loop = {index: 1, first: true};var item;
   for ( var i = 0 ,len = data.rankList.length; i < len; i++){ loop.index = i+1; item = data.rankList[i]; if(loop.index === 1){ loop.first === true;}else{ loop.first = false; }
          _$out_.push( ' '); if( loop.index > 3){
          _$out_.push( ' <li class="ui-border-t ui-list-item"> <h1 class="li-index">',  loop.index + 4 , '</h1> <div class="ui-avatar"> <span style="background-image:url(',  item.logo , ')"></span> </div> <div class="ui-list-info"> <h4 class="ui-nowrap">',  item.name , '</h4> <p class="ui-nowrap"><span>动态:',  item.msg , '</span>/<span>关注:',  item.follow , '</span></p> </div> <div class="ui-sign"><span class="number">',  item.sign , '</span>人签到</div> </li> '); }
          _$out_.push( ''); }
          _$out_.push( '');
        return _$out_.join('');
      }
  }

});
